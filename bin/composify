#!/usr/bin/env bash

COMPOSIFY_RELEASE="1.1.1"

getopt -T &> /dev/null
if [ "$?" -eq 0 ]; then
cat <<EOF
You need to install gnu-getopt to run this program.
If you run this programm on OSX, try:
    $ brew install gnu-getopt && brew link gnu-getopt --force
EOF
  exit 100;
fi

TEMP=$(getopt -o f:,h,v,d,V -l file:,help,verbose,dry-run,version -n "composify" -- "$@")

cleanup() {
  if [ -f .docker-compose.yml ]; then
    rm .docker-compose.yml
  fi
}

set_compose_path(){
  if [ -z "$COMPOSE_FILE_PATH" ]; then
    COMPOSE_FILE_PATH="$COMPOSE_CONF/docker-compose.yml"
  fi
}

usage() {
cat << EOF
Usage: composify [OPTIONS]
  A docker compose wrapper to simplify dev work with containers
    -f, --file             Path to the docker compose file
    -h, --help             Display this usage description
    -v, --verbose          Display executed docker-compose command
    -d, --dry-run          Display docker-compose command aims to be executed
    -V, --version          Return composify version
  You can also configure following environment variables, either export them
  from a .composify file in the current execution path of the command OR by
  set at runtime. If you use .composify file please add it to YOUR global gitignore.
    COMPOSE_CONF
    COMPOSE_FILE_PATH
    COMPOSE_DEFAULT_RUN_OPTIONS
  Most useful use cases examples:
    Run a simple command
    $ composify up
    Run a command with some options
    $ composify -f /my/compose/file up db
EOF
}

# START SCRIPT EXECUTION
if [ "$?" -ne 0 ]; then
  usage && exit 1
fi

# Save COMPOSE_CONF if set at runtime
if [ -n "$COMPOSE_CONF" ]; then
  compose_conf=$COMPOSE_CONF
fi

COMPOSIFY_CONFIG_FILE_PATH=$(pwd)/.composify
if [ -f "$COMPOSIFY_CONFIG_FILE_PATH" ]; then
  source "$COMPOSIFY_CONFIG_FILE_PATH"
fi

if [ -n "$compose_conf" ];then
  COMPOSE_CONF="$compose_conf"
fi

eval set -- "$TEMP"
while [ $# -gt 0 ]
do
  case "$1" in
    -f|--file)          COMPOSE_FILE_PATH=$2; shift 2 ;;
    -h|--help)          usage && exit 0 ;;
    -v|--verbose)       COMPOSIFY_VERBOSE_MODE="yes"; shift ;;
    -d|--dry-run)       COMPOSIFY_DRYRUN_MODE="yes"; shift ;;
    -V|--version)       echo "composify $COMPOSIFY_RELEASE" && exit 0;;
    -- )                shift; break ;;
    *)                  break ;;
  esac
done

# Make sure to clean up after myself
trap cleanup EXIT

if [[ -z "$COMPOSE_CONF" || -z "$@" ]]; then
  usage && exit 2
else
  set_compose_path
  cp "$COMPOSE_FILE_PATH" .docker-compose.yml
  COMPOSE_FILE_PATH=.docker-compose.yml
fi

COMPOSE_RUN_OPTIONS=($COMPOSE_DEFAULT_RUN_OPTIONS $COMPOSE_RUN_OPTIONS)

CMD=(docker-compose --file "$COMPOSE_FILE_PATH" "${COMPOSE_RUN_OPTIONS[@]}" "$@")

if [[ "$COMPOSIFY_VERBOSE_MODE" = "yes" || "$COMPOSIFY_DRYRUN_MODE" = "yes" ]]; then
  printf '%s\n' "${CMD[*]}"
fi

if [ "$COMPOSIFY_DRYRUN_MODE" != "yes" ]; then
  export COMPOSE_CONF=$COMPOSE_CONF
  "${CMD[@]}"
fi